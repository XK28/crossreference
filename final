import os
import re
import io
import pandas as pd
import msoffcrypto
import tkinter as tk
from tkinter import simpledialog
from reportlab.lib.pagesizes import letter
from reportlab.platypus import (
    SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
)
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch

# -----------------------
# Interfaz gráfica para selección de tipo de validación
# -----------------------
tipo_validacion = None

def seleccionar_tipo(tipo):
    global tipo_validacion
    tipo_validacion = tipo
    ventana.destroy()

ventana = tk.Tk()
ventana.title("Seleccionar tipo de validación")
ventana.geometry("300x120")
tk.Label(ventana, text="Seleccione el tipo de validación:").pack(pady=10)
tk.Button(ventana, text="ACH XPRESS", width=20, command=lambda: seleccionar_tipo("ach")).pack(pady=5)
tk.Button(ventana, text="Cuenta Puente", width=20, command=lambda: seleccionar_tipo("puente")).pack(pady=5)
ventana.mainloop()

# -----------------------
# Solicitar contraseña
# -----------------------
password = simpledialog.askstring("Contraseña", "Ingrese la contraseña del archivo Excel (dejar vacío si no tiene):")

# -----------------------
# Funciones auxiliares
# -----------------------
def extraer_id_7_inicio_exacto(s):
    if s is None:
        return None
    s = str(s).strip()
    if len(s) < 7:
        return None
    # Verificar que los primeros 7 caracteres sean dígitos
    primeros7 = s[:7]
    if primeros7.isdigit():
        return primeros7
    else:
        return None

def parse_amount_safe(x):
    if x is None or (isinstance(x, float) and pd.isna(x)):
        return None
    s = str(x).strip()
    if s == "":
        return None
    s = s.replace(",", "")
    s = re.sub(r'[^\d.\-]', '', s)
    if s in ("", ".", "-", "-.", ".-"):
        return None
    try:
        return float(s)
    except Exception:
        return None

# -----------------------
# Leer archivo de validación
# -----------------------
validacion_dir = r"C:\\Users\\katejada\\Desktop\\Codigos y .Exe\\ACH\\validacion"
archivos_validacion = [
    f for f in os.listdir(validacion_dir)
    if f.lower().endswith(('.xlsx', '.xlsm', '.csv'))
]
if not archivos_validacion:
    raise FileNotFoundError("No se encontró archivo de validación en la carpeta ./validacion")
ruta_validacion = os.path.join(validacion_dir, archivos_validacion[0])

# Cargar validación
if ruta_validacion.lower().endswith('.csv'):
    df_validar = pd.read_csv(
        ruta_validacion,
        header=None,
        dtype=str,
        sep='|',
        engine='python',
        on_bad_lines='skip'
    )
else:
    with open(ruta_validacion, "rb") as f:
        office_file = msoffcrypto.OfficeFile(f)
        try:
            enc = office_file.is_encrypted()
        except Exception:
            enc = bool(password)
        if enc:
            try:
                if password:
                    office_file.load_key(password=password)
                decrypted = io.BytesIO()
                office_file.decrypt(decrypted)
                decrypted.seek(0)
                df_validar = pd.read_excel(decrypted, engine="openpyxl", header=None)
            except Exception:
                df_validar = pd.read_excel(ruta_validacion, engine="openpyxl", header=None)
        else:
            df_validar = pd.read_excel(ruta_validacion, engine="openpyxl", header=None)

# -----------------------
# Procesar validación: generar llaves BC o BD según opción
# -----------------------
if len(df_validar) > 1:
    df_valid = df_validar.iloc[1:].reset_index(drop=True)
else:
    df_valid = df_validar.copy()

# Columnas B, C, D
colB = df_valid[1].astype(str) if df_valid.shape[1] > 1 else pd.Series([None]*len(df_valid))
colC = df_valid[2] if df_valid.shape[1] > 2 else pd.Series([None]*len(df_valid))
colD = df_valid[3] if df_valid.shape[1] > 3 else pd.Series([None]*len(df_valid))

valid_llaves_bc = []  # lista de tuplas (llave, monto) de B|C
valid_llaves_bd = []  # lista de tuplas (llave, monto) de B|D

if tipo_validacion == "puente":
    # Cuenta Puente: usar columnas B|D
    for b, d in zip(colB, colD):
        idv = extraer_id_7_inicio_exacto(b)
        if idv is None:
            continue
        amt = parse_amount_safe(d)
        if amt is None:
            continue
        llave = f"{idv} | {amt:.2f}"
        valid_llaves_bd.append((llave, amt))
else:
    # ACH XPRESS: usar B|C si C tiene valor; si C null, usar B|D
    for b, c, d in zip(colB, colC, colD):
        idv = extraer_id_7_inicio_exacto(b)
        if idv is None:
            continue
        amt_c = parse_amount_safe(c)
        if amt_c is not None:
            llave = f"{idv} | {amt_c:.2f}"
            valid_llaves_bc.append((llave, amt_c))
        else:
            amt_d = parse_amount_safe(d)
            if amt_d is not None:
                llave = f"{idv} | {amt_d:.2f}"
                valid_llaves_bd.append((llave, amt_d))
            else:
                continue

# Crear conjunto de llaves válidas
llaves_validas = set([lk for (lk, m) in valid_llaves_bc + valid_llaves_bd])

# -----------------------
# Leer archivos de referencia y generar llaves_referencia
# -----------------------
referencia_dir = r"C:\\Users\\katejada\\Desktop\\Codigos y .Exe\\ACH\\referencia"
archivos_referencia = [
    f for f in os.listdir(referencia_dir)
    if f.lower().endswith(('.xlsx', '.xlsm', '.csv'))
]
df_refs_list = []

for archivo in archivos_referencia:
    ruta_archivo = os.path.join(referencia_dir, archivo)
    try:
        if archivo.lower().endswith('.csv'):
            df_ref = pd.read_csv(
                ruta_archivo,
                header=None,
                dtype=str,
                sep='|',
                engine='python',
                on_bad_lines='skip'
            )
        else:
            with open(ruta_archivo, "rb") as f:
                office_file = msoffcrypto.OfficeFile(f)
                try:
                    enc_ref = office_file.is_encrypted()
                except Exception:
                    enc_ref = bool(password)
                if enc_ref:
                    if password:
                        office_file.load_key(password=password)
                    decrypted_ref = io.BytesIO()
                    office_file.decrypt(decrypted_ref)
                    decrypted_ref.seek(0)
                    df_ref_original = pd.read_excel(decrypted_ref, engine="openpyxl", header=None)
                else:
                    df_ref_original = pd.read_excel(ruta_archivo, engine="openpyxl", header=None)

            if df_ref_original.shape[1] <= 4:
                df_ref = df_ref_original[0].astype(str).str.split('|', expand=True)
            else:
                df_ref = df_ref_original

        # Detectar mejor columna de IDs
        best_col = None
        best_count = 0
        max_check_col = min(4, df_ref.shape[1] - 1)
        for col_idx in range(0, max_check_col + 1):
            try:
                series_col = df_ref[col_idx].astype(str)
            except Exception:
                continue
            valid_count = series_col.apply(extraer_id_7_inicio_exacto).notna().sum()
            if valid_count > best_count:
                best_count = valid_count
                best_col = col_idx
        if best_col is None or best_count == 0:
            continue

        # Columna monto preferente
        if 4 in df_ref.columns:
            col_amount = df_ref[4]
            if col_amount.apply(parse_amount_safe).notna().any():
                amount_col_idx = 4
            else:
                amount_col_idx = None
        else:
            amount_col_idx = None

        if amount_col_idx is None:
            # fallback: búsqueda
            amount_col_idx = None
            for j in range(1, min(7, df_ref.shape[1])):
                serie = df_ref[j].apply(parse_amount_safe)
                if serie.notna().any():
                    amount_col_idx = j
                    break

        if amount_col_idx is None:
            monto_series = pd.Series(['0.00'] * len(df_ref), index=df_ref.index)
        else:
            monto_series = df_ref[amount_col_idx].apply(parse_amount_safe).map(
                lambda x: "{:.2f}".format(x) if x is not None else None
            )

        id_series = df_ref[best_col].astype(str).apply(extraer_id_7_inicio_exacto)

        df_ref_temp = pd.DataFrame({'ID': id_series, 'MONTO': monto_series})
        df_ref_temp = df_ref_temp[df_ref_temp['ID'].notna() & df_ref_temp['MONTO'].notna()].reset_index(drop=True)
        if df_ref_temp.empty:
            continue

        df_ref_proc = pd.DataFrame({'LLAVE': df_ref_temp['ID'] + " | " + df_ref_temp['MONTO']})
        df_refs_list.append(df_ref_proc)

    except Exception:
        continue

if not df_refs_list:
    raise ValueError("No se pudieron procesar archivos de referencia válidos.")

df_refs_concat = pd.concat(df_refs_list, ignore_index=True)

# DEFINIR llaves_referencia AQUÍ
llaves_referencia = set(df_refs_concat['LLAVE'])

# -----------------------
# Comparar llaves
# -----------------------
llaves_encontradas = sorted(list(llaves_validas & llaves_referencia))
llaves_no_encontradas = sorted(list(llaves_validas - llaves_referencia))

# -----------------------
# Generar PDF (puedes incluir el resumen y tablas como lo hayas configurado)
# -----------------------
pdf_name = simpledialog.askstring("Nombre del PDF", "Ingrese el nombre para el archivo PDF de salida (sin extensión):")
if not pdf_name:
    raise ValueError("Debe ingresar un nombre para el archivo PDF.")

ruta_pdf = f"{pdf_name}.pdf"

doc = SimpleDocTemplate(ruta_pdf, pagesize=letter)
elements = []
styles = getSampleStyleSheet()

# Ejemplo tabla NO ENCONTRADAS
data_no = [[Paragraph("LLAVES NO ENCONTRADAS", styles['Heading4'])]]
for lk in llaves_no_encontradas:
    data_no.append([Paragraph(str(lk), styles['Normal'])])
tabla_no = Table(data_no, colWidths=[6.5 * inch])
tabla_no.setStyle(TableStyle([
    ('BACKGROUND', (0, 0), (-1, 0), colors.red),
    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
    ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
    ('VALIGN', (0, 0), (-1, -1), 'TOP')
]))
elements.append(tabla_no)
elements.append(Spacer(1, 0.3 * inch))

# Ejemplo tabla ENCONTRADAS
data_si = [[Paragraph("LLAVES ENCONTRADAS", styles['Heading4'])]]
for lk in llaves_encontradas:
    data_si.append([Paragraph(str(lk), styles['Normal'])])
tabla_si = Table(data_si, colWidths=[6.5 * inch])
tabla_si.setStyle(TableStyle([
    ('BACKGROUND', (0, 0), (-1, 0), colors.green),
    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
    ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
    ('VALIGN', (0, 0), (-1, -1), 'TOP')
]))
elements.append(tabla_si)

doc.build(elements)

print("PDF generado:", ruta_pdf)
