import pandas as pd
import os
import msoffcrypto
import io
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch
import tkinter as tk
from tkinter import simpledialog

# =======================
# Interfaz gráfica para solicitar contraseña
# =======================
root = tk.Tk()
root.withdraw()
password = simpledialog.askstring("Contraseña", "Ingrese la contraseña del archivo Excel:")

# =======================
# Leer archivo de validación desde carpeta
# =======================
validacion_dir = r"C:\Users\katejada\Desktop\Codigos y .Exe\ACH\validacion"
archivos_validacion = [f for f in os.listdir(validacion_dir) if f.endswith(('.xlsx', '.xlsm', '.csv'))]
if not archivos_validacion:
    raise FileNotFoundError("No se encontró archivo de validación en la carpeta ./validacion")

archivo_val = archivos_validacion[0]
ruta_archivo = os.path.join(validacion_dir, archivo_val)

if archivo_val.endswith('.csv'):
    df_validar = pd.read_csv(ruta_archivo, header=None, skiprows=8)
else:
    with open(ruta_archivo, "rb") as f:
        office_file = msoffcrypto.OfficeFile(f)
        office_file.load_key(password=password)
        decrypted = io.BytesIO()
        office_file.decrypt(decrypted)
        df_validar = pd.read_excel(decrypted, engine="openpyxl", header=None, skiprows=8)

df_validar = df_validar[[1, 2]]
df_validar.columns = ['ID', 'CARGO']
df_validar['ID'] = df_validar['ID'].astype(str).str.extract(r'(\d{7})')[0]
df_validar['CARGO'] = pd.to_numeric(df_validar['CARGO'], errors='coerce').fillna(0).map('{:.2f}'.format)
df_validar['LLAVE'] = df_validar['ID'] + " | " + df_validar['CARGO']

# =======================
# Leer archivos de referencia desde carpeta
# =======================
referencia_dir = r"C:\Users\katejada\Desktop\Codigos y .Exe\ACH\referencia"
archivos_referencia = [f for f in os.listdir(referencia_dir) if f.endswith(('.xlsx', '.csv'))]
df_refs_list = []

for archivo in archivos_referencia:
    ruta_archivo = os.path.join(referencia_dir, archivo)
    if archivo.endswith('.csv'):
        df = pd.read_csv(ruta_archivo, header=None, delimiter='|')
    else:
        df = pd.read_excel(ruta_archivo, engine="openpyxl", header=None)

    df_split = df if archivo.endswith('.csv') else df[0].astype(str).str.split('|', expand=True)

    if df_split.shape[1] > 4:
        df_split[0] = df_split[0].astype(str).str.extract(r'(\d{7})')[0]
        df_split[4] = pd.to_numeric(df_split[4], errors='coerce').fillna(0).map('{:.2f}'.format)
        df_split['LLAVE'] = df_split[0] + " | " + df_split[4]
        df_refs_list.append(df_split)
    else:
        print(f"Archivo {archivo} no tiene suficientes columnas después del split.")

df_refs = pd.concat(df_refs_list, ignore_index=True)

# Comparar llaves
llaves_no_encontradas = df_validar[~df_validar['LLAVE'].isin(df_refs['LLAVE'])]

# =======================
# Interfaz gráfica para nombre del PDF
# =======================
pdf_name = simpledialog.askstring("Nombre del PDF", "Ingrese el nombre para el archivo PDF de salida (sin extensión):")
if not pdf_name:
    raise ValueError("Debe ingresar un nombre para el archivo PDF.")
ruta_pdf = f"{pdf_name}.pdf"

# =======================
# Crear PDF con llaves no encontradas
# =======================
doc = SimpleDocTemplate(ruta_pdf, pagesize=letter)
elements = []
styles = getSampleStyleSheet()
data = [[Paragraph("LLAVES NO ENCONTRADAS", styles['Heading4'])]]

for llave in llaves_no_encontradas['LLAVE']:
    data.append([Paragraph(str(llave), styles['Normal'])])

tabla = Table(data, colWidths=[6.5 * inch])
tabla.setStyle(TableStyle([
    ('BACKGROUND', (0, 0), (-1, 0), colors.gray),
    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
    ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
    ('VALIGN', (0, 0), (-1, -1), 'TOP')
]))

elements.append(tabla)
doc.build(elements)
print("PDF generado con llaves no encontradas:", ruta_pdf)
