import subprocess
import os
import re
import io
import pandas as pd
import msoffcrypto
import tkinter as tk
from tkinter import simpledialog
from reportlab.lib.pagesizes import letter
from reportlab.platypus import (
    SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
)
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from dateutil.parser import parse, ParserError

# ----------------------------
# Función para calcular SHA256 usando certutil (Windows)
# ----------------------------
def calcular_sha256_con_certutil(ruta_archivo):
    try:
        cmd = ["certutil", "-hashfile", ruta_archivo, "SHA256"]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        lines = result.stdout.strip().splitlines()
        if len(lines) >= 2:
            return lines[1].strip()
        return None
    except:
        return None

# -----------------------
# Interfaz gráfica para selección de tipo de validación
# -----------------------
tipo_validacion = None

def seleccionar_tipo(tipo):
    global tipo_validacion
    tipo_validacion = tipo
    ventana.destroy()

ventana = tk.Tk()
ventana.title("Seleccionar tipo de validación")
ventana.geometry("300x120")
tk.Label(ventana, text="Seleccione el tipo de validación:").pack(pady=10)
tk.Button(ventana, text="ACH XPRESS", width=20,
          command=lambda: seleccionar_tipo("ach")).pack(pady=5)
tk.Button(ventana, text="Cuenta Puente", width=20,
          command=lambda: seleccionar_tipo("puente")).pack(pady=5)
ventana.mainloop()

# -----------------------
# Solicitar contraseña
# -----------------------
password = simpledialog.askstring(
    "Contraseña", "Ingrese la contraseña del archivo Excel (dejar vacío si no tiene):"
)

# -----------------------
# Funciones auxiliares
# -----------------------
def es_fecha(s):
    try:
        parse(str(s).strip(), fuzzy=False)
        return True
    except (ParserError, ValueError, TypeError):
        return False

def extraer_id_7_8_digitos_inicio(s):
    if s is None:
        return None
    s = str(s).strip()
    m = re.match(r"^(\d{7,8})", s)
    return m.group(1) if m else None

def parse_amount_safe(x):
    if x is None or (isinstance(x, float) and pd.isna(x)):
        return None
    s = str(x).strip()
    if s == "":
        return None
    s = s.replace(",", "")
    s = re.sub(r'[^\d.\-]', '', s)
    try:
        return float(s)
    except:
        return None

# -----------------------
# Leer archivo de validación
# -----------------------
validacion_dir = r"C:\\Users\\katejada\\Desktop\\Codigos y .Exe\\ACH\\validacion"
archivos_validacion = [
    f for f in os.listdir(validacion_dir)
    if f.lower().endswith(('.xlsx', '.xlsm', '.csv'))
]
if not archivos_validacion:
    raise FileNotFoundError("No se encontró archivo de validación")
ruta_validacion = os.path.join(validacion_dir, archivos_validacion[0])

if ruta_validacion.lower().endswith('.csv'):
    df_validar = pd.read_csv(ruta_validacion, header=None, dtype=str, sep='|', engine='python')
else:
    with open(ruta_validacion, "rb") as f:
        office_file = msoffcrypto.OfficeFile(f)
        try:
            enc = office_file.is_encrypted()
        except Exception:
            enc = bool(password)
        if enc:
            if password:
                office_file.load_key(password=password)
            decrypted = io.BytesIO()
            office_file.decrypt(decrypted)
            decrypted.seek(0)
            df_validar = pd.read_excel(decrypted, engine="openpyxl", header=None)
        else:
            df_validar = pd.read_excel(ruta_validacion, engine="openpyxl", header=None)

if len(df_validar) > 1:
    df_valid = df_validar.iloc[1:].reset_index(drop=True)
else:
    df_valid = df_validar.copy()

colB = df_valid[1].astype(str) if df_valid.shape[1] > 1 else pd.Series([None]*len(df_valid))
colC = df_valid[2] if df_valid.shape[1] > 2 else pd.Series([None]*len(df_valid))
colD = df_valid[3] if df_valid.shape[1] > 3 else pd.Series([None]*len(df_valid))

valid_llaves_bc = []
valid_llaves_bd = []
excepciones = []

# -----------------------
# Generar llaves
# -----------------------
for idx, (b, c, d) in enumerate(zip(colB, colC, colD), start=2):  # fila Excel empieza en 2
    b_str = str(b).strip()
    if b_str == "" or es_fecha(b_str):
        continue

    if not b_str[0].isdigit():
        continue

    m = re.match(r"^(\d+)", b_str)
    if not m:
        continue
    id_seq = m.group(1)

    if len(id_seq) < 7 or len(id_seq) > 8:
        excepciones.append((idx, b_str))
        continue

    amt_c = parse_amount_safe(c)
    amt_d = parse_amount_safe(d)

    if amt_c is not None:
        llave_bc = f"{id_seq} | {amt_c:.2f}"
        valid_llaves_bc.append((llave_bc, amt_c))
    if amt_d is not None:
        llave_bd = f"{id_seq} | {amt_d:.2f}"
        valid_llaves_bd.append((llave_bd, amt_d))

# -----------------------
# Leer referencias y calcular SHA256
# -----------------------
referencia_dir = r"C:\\Users\\katejada\\Desktop\\Codigos y .Exe\\ACH\\referencia"
archivos_referencia = [f for f in os.listdir(referencia_dir) if f.lower().endswith(('.xlsx', '.xlsm', '.csv'))]

hashes_referencia = {}
df_refs_list = []

for archivo in archivos_referencia:
    ruta_archivo = os.path.join(referencia_dir, archivo)
    h = calcular_sha256_con_certutil(ruta_archivo)
    hashes_referencia[archivo] = h

    try:
        if archivo.lower().endswith('.csv'):
            df_ref = pd.read_csv(ruta_archivo, header=None, dtype=str, sep='|', engine='python')
        else:
            df_ref = pd.read_excel(ruta_archivo, engine="openpyxl", header=None)
            if df_ref.shape[1] <= 4:
                df_ref = df_ref[0].astype(str).str.split('|', expand=True)

        id_series = df_ref[0].astype(str).apply(extraer_id_7_8_digitos_inicio)
        monto_series = df_ref[4].apply(parse_amount_safe) if df_ref.shape[1] > 4 else pd.Series([None]*len(df_ref))
        df_ref_temp = pd.DataFrame({'ID': id_series, 'MONTO': monto_series})
        df_ref_temp = df_ref_temp[df_ref_temp['ID'].notna() & df_ref_temp['MONTO'].notna()].reset_index(drop=True)
        if not df_ref_temp.empty:
            df_refs_list.append(pd.DataFrame({'LLAVE': df_ref_temp['ID'] + " | " + df_ref_temp['MONTO'].map(lambda x: f"{x:.2f}")}))
    except:
        continue

df_refs_concat = pd.concat(df_refs_list, ignore_index=True)
llaves_referencia = set(df_refs_concat['LLAVE'])

# -----------------------
# Comparar llaves
# -----------------------
found_bc = [m for (lk, m) in valid_llaves_bc if lk in llaves_referencia]
no_found_bc = [lk for (lk, m) in valid_llaves_bc if lk not in llaves_referencia]

found_bd = [m for (lk, m) in valid_llaves_bd if lk in llaves_referencia]
no_found_bd = [lk for (lk, m) in valid_llaves_bd if lk not in llaves_referencia]

# -----------------------
# Generar PDF
# -----------------------
pdf_name = simpledialog.askstring("Nombre del PDF", "Ingrese el nombre para el archivo PDF de salida (sin extensión):")
if not pdf_name:
    raise ValueError("Debe ingresar un nombre para el archivo PDF de salida.")

carpeta_salida = r'C:\Users\katejada\Desktop\Codigos y .Exe\ACH'
if not os.path.exists(carpeta_salida):
    os.makedirs(carpeta_salida, exist_ok=True)
ruta_pdf = os.path.join(carpeta_salida, f"{pdf_name}.pdf")

doc = SimpleDocTemplate(ruta_pdf, pagesize=letter)
elements = []
styles = getSampleStyleSheet()

# 1) Hashes de referencia
elements.append(Paragraph("Hashes SHA256 de archivos de referencia:", styles["Heading4"]))
data_hash = [["Archivo", "SHA256"]]
for ar, h in hashes_referencia.items():
    data_hash.append([Paragraph(ar, styles['Normal']), Paragraph(str(h), styles['Normal'])])
tabla_hash = Table(data_hash, colWidths=[2.5*inch, 4*inch])
tabla_hash.setStyle(TableStyle([
    ('BACKGROUND',(0,0),(-1,0),colors.gray),
    ('TEXTCOLOR',(0,0),(-1,0),colors.whitesmoke),
    ('GRID',(0,0),(-1,-1),0.5,colors.black),
]))
elements.append(tabla_hash)
elements.append(Spacer(1,0.3*inch))

# 2) Resumen
resumen = (
    f"Resumen de llaves usando columnas B|C:<br/>"
    f"Encontradas: {len(found_bc)} llaves, monto total C: {sum(found_bc):.2f}<br/>"
    f"No encontradas: {len(no_found_bc)} llaves<br/><br/>"
    f"Resumen de llaves usando columnas B|D:<br/>"
    f"Encontradas: {len(found_bd)} llaves, monto total D: {sum(found_bd):.2f}<br/>"
    f"No encontradas: {len(no_found_bd)} llaves"
)
elements.append(Paragraph(resumen, styles['Normal']))
elements.append(Spacer(1,0.3*inch))

# 3) Excepciones
if excepciones:
    elements.append(Paragraph("Excepciones (columna B con <7 o >8 dígitos numéricos, fechas ignoradas):", styles["Heading4"]))
    data_exc = [["Fila", "Valor B"]]
    for fila, val in excepciones:
        data_exc.append([str(fila), Paragraph(str(val), styles['Normal'])])
    tabla_exc = Table(data_exc, colWidths=[1.5*inch, 5*inch])
    tabla_exc.setStyle(TableStyle([
        ('BACKGROUND',(0,0),(-1,0),colors.grey),
        ('TEXTCOLOR',(0,0),(-1,0),colors.whitesmoke),
        ('GRID',(0,0),(-1,-1),0.5,colors.black),
    ]))
    elements.append(tabla_exc)
    elements.append(Spacer(1,0.3*inch))

# 4) Llaves NO encontradas
if no_found_bc or no_found_bd:
    data_no = [[Paragraph("LLAVES NO ENCONTRADAS", styles['Heading4'])]]
    for lk in no_found_bc + no_found_bd:
        data_no.append([Paragraph(str(lk), styles['Normal'])])
    tabla_no = Table(data_no, colWidths=[6.5*inch])
    tabla_no.setStyle(TableStyle([
        ('BACKGROUND',(0,0),(-1,0),colors.red),
        ('TEXTCOLOR',(0,0),(-1,0),colors.whitesmoke),
        ('GRID',(0,0),(-1,-1),0.5,colors.black),
    ]))
    elements.append(tabla_no)
    elements.append(Spacer(1,0.3*inch))

# 5) Llaves encontradas
if found_bc or found_bd:
    data_si = [[Paragraph("LLAVES ENCONTRADAS", styles['Heading4'])]]
    for lk in [lk for (lk, m) in valid_llaves_bc if lk in llaves_referencia] + \
              [lk for (lk, m) in valid_llaves_bd if lk in llaves_referencia]:
        data_si.append([Paragraph(str(lk), styles['Normal'])])
    tabla_si = Table(data_si, colWidths=[6.5*inch])
    tabla_si.setStyle(TableStyle([
        ('BACKGROUND',(0,0),(-1,0),colors.green),
        ('TEXTCOLOR',(0,0),(-1,0),colors.whitesmoke),
        ('GRID',(0,0),(-1,-1),0.5,colors.black),
    ]))
    elements.append(tabla_si)

doc.build(elements)
print("PDF generado:", ruta_pdf)
