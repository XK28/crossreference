import asyncio
import tkinter as tk
from tkinter import simpledialog
from playwright.async_api import async_playwright, TimeoutError
import re

def solicitar_credenciales():
    root = tk.Tk()
    root.withdraw()
    usuario = simpledialog.askstring("Login", "Ingrese su usuario corporativo:")
    contraseña = simpledialog.askstring("Login", "Ingrese su contraseña:", show='*')
    root.destroy()
    return usuario, contraseña

async def main():
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=False)
        context = await browser.new_context()
        page = await context.new_page()

        await page.goto("https://web-prod.core.appst.bancolombia.corp/CWC/services/cobis/web/bank/views/commons/login.html")
        await page.wait_for_load_state('domcontentloaded')

        # Intentamos detectar si ya estamos listos para seleccionar dropdowns
        try:
            await page.wait_for_selector('#filialCombobox', state='attached', timeout=5000)
            print("El combobox existe (attachment).")
        except TimeoutError:
            print("No se encontró el combobox base — proceder con login.")
            # Hacer login Microsoft u otro flujo
            await page.wait_for_selector('text=Microsoft', state='visible', timeout=15000)
            await page.click('text=Microsoft')
            await page.wait_for_url(re.compile(r".*login\.microsoftonline\.com.*"), timeout=60000)

            usuario, contraseña = solicitar_credenciales()

            await page.wait_for_selector('input[type="email"]', timeout=60000)
            await page.fill('input[type="email"]', usuario)
            await page.press('input[type="email"]', 'Enter')

            await page.wait_for_selector('input[type="password"]', timeout=60000)
            await page.fill('input[type="password"]', contraseña)
            await page.press('input[type="password"]', 'Enter')

            print("Esperando MFA / redirección...")
            await page.wait_for_timeout(20000)
            try:
                await page.wait_for_function("!window.location.href.includes('microsoftonline.com')", timeout=60000)
                await page.wait_for_load_state('networkidle')
            except Exception as e:
                print("Error al esperar redirección:", e)
                await page.screenshot(path="error_redireccion.png")
                await browser.close()
                return

        print("URL después del login:", page.url)

        # Ahora interactuamos con cada combobox (div/span/input visible)
        # Ejemplo para Filial:
        try:
            print("Intentando desplegar Filial Combobox...")
            # clic en el input o su contenedor visual (span, div) que dispara la lista
            await page.click("#filialCombobox")  # este input puede estar oculto, pero sirve para foco
        except Exception as e:
            print("No se pudo hacer clic directo en #filialCombobox:", e)

        # Ahora esperar que aparezca la lista <ul> con opciones
        try:
            await page.wait_for_selector("#filialCombobox_listbox li", timeout=10000)
            print("Lista de opciones de Filial mostrada.")
            # clicar la primera opción
            await page.click("#filialCombobox_listbox li")
        except Exception as e:
            print("Error al abrir o seleccionar del listado Filial:", e)
            await page.screenshot(path="error_filial_list.png")

        # Repetir para oficina
        try:
            await page.click("#oficinaCombobox")
            await page.wait_for_selector("#oficinaCombobox_listbox li", timeout=10000)
            await page.click("#oficinaCombobox_listbox li")
        except Exception as e:
            print("Error con oficina dropdown:", e)

        # Repetir para rol
        try:
            await page.click("#rolCombobox")
            await page.wait_for_selector("#rolCombobox_listbox li", timeout=10000)
            await page.click("#rolCombobox_listbox li")
        except Exception as e:
            print("Error con rol dropdown:", e)

        # Clic en Ingresar (botón visible)
        try:
            await page.wait_for_selector('button:has-text("Ingresar")', timeout=10000)
            await page.click('button:has-text("Ingresar")')
        except Exception as e:
            print("Error al hacer clic en Ingresar:", e)
            await page.screenshot(path="error_ingresar_btn.png")

        await page.wait_for_timeout(5000)
        await browser.close()

if __name__ == "__main__":
    asyncio.run(main())

